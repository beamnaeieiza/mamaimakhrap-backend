generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  uid              String     @unique
  firstname        String     @default("")
  lastname         String     @default("")
  email            String
  faculty          String     @default("")
  department       String     @default("")
  role             String     @default("unset")
  avatar_url       String     @default("")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  given_feedbacks  Feedback[] @relation("students")
  feedbacks        Feedback[] @relation("feedback_owners")
  histories        History[]
  created_rounds   Round[]
  created_courses  Course[]   @relation("created_courses")
  enrolled_courses Course[]   @relation("enrolled_courses")
}

model Course {
  id              Int        @id @default(autoincrement())
  name            String
  code            String
  join_code       String     @unique
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  course_feedback Feedback[]
  course_rounds   Round[]
  created_by_user User       @relation("created_courses", fields: [userId], references: [id])
  enrolled_users  User[]     @relation("enrolled_courses")
  userId          Int
}

model Round {
  id         Int       @id @default(autoincrement())
  course_id  Int
  date       DateTime
  startAt    DateTime
  endAt      DateTime
  maxStudent Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user_id    Int
  histories  History[]
  course     Course    @relation(fields: [course_id], references: [id])
  user       User      @relation(fields: [user_id], references: [id])

  @@index([course_id], map: "Round_course_id_fkey")
  @@index([user_id], map: "Round_user_id_fkey")
}

model History {
  id       Int     @id @default(autoincrement())
  user_id  Int
  round_id Int
  feedback String
  status   Boolean
  round    Round   @relation(fields: [round_id], references: [id])
  owner    User    @relation(fields: [user_id], references: [id])

  @@index([round_id], map: "History_round_id_fkey")
  @@index([user_id], map: "History_user_id_fkey")
}

model Feedback {
  id           Int      @id @default(autoincrement())
  student_id   Int
  feedbackText String
  course_id    Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  teacher_id   Int?
  course       Course   @relation(fields: [course_id], references: [id])
  student      User     @relation("students", fields: [student_id], references: [id])
  teacher      User?    @relation("feedback_owners", fields: [teacher_id], references: [id])

  @@index([course_id], map: "Feedback_course_id_fkey")
  @@index([student_id], map: "Feedback_student_id_fkey")
  @@index([teacher_id], map: "Feedback_teacher_id_fkey")
}
